# /etc/skel/.bashrc
#
# AUTHOR: Daniel Klopp 
# COPYRIGHT: GNU Public License 
# OS Support: Theoretically OSX and Linux, not always thoroughly tested
# DESCRIPTION: My BASH profile.  I tend to source it from .bashrc and keep
# this in github.  I do have other profiles for "Work specific".  I keep those


if [[ $- != *i* ]] ; then
	# Shell is non-interactive.  Be done now!
   # This handles odd cases with scp 
	return
fi
if [ `uname` == "Darwin" ]; then
  : # Sadly I have to do this as the next command only works on Cygwin
elif [ `uname -o` == "Cygwin" ]; then
	PATH="/usr/local/bin:/usr/bin:/cygdrive/c/WINDOWS/system32:/cygdrive/c/WINDOWS:/cygdrive/c/WINDOWS/System32/Wbem:/cygdrive/c/WINDOWS/System32/WindowsPowerShell/v1.0:/cygdrive/c/Program Files (x86)/Skype/Phone"
	if [ -d /cygdrive/c/Go/bin ]; then
		PATH=/cygdrive/c/Go/bin:$PATH
	fi
	PATH="/cygdrive/c/Ruby22-x64/bin:$PATH"
	export PATH
	alias gem='gem.bat'
	alias rake='rake.bat'
	alias erb='erb.bat'
	alias irb='irb.bat'
	alias rdoc='rdoc.bat'
	alias ri='ri.bat'
	alias rspec='rspec.bat'
	alias bundle='bundle.bat'
fi
PATH=~/Documents/projects/scripts/bin:$PATH
export PATH
# Put your fun stuff here.

alias cp='/bin/cp -i'
if [ `uname` == "Darwin" ]; then
	alias ls='/bin/ls -aFG'
   alias emacs='/Applications/Emacs.app/Contents/MacOS/Emacs'
else
	alias ls='/bin/ls -aF --color=always'
fi
alias mv='/bin/mv -i'
alias rm='/bin/rm -i'

## Colors
COLOR_RED="\[\e[31;40m\]"
COLOR_GREEN="\[\e[32;40m\]"
COLOR_YELLOW="\[\e[33;40m\]"
COLOR_BLUE="\[\e[34;40m\]"
COLOR_MAGENTA="\[\e[35;40m\]"
COLOR_CYAN="\[\e[36;40m\]"
COLOR_RED_BOLD="\[\e[31;1m\]"
COLOR_GREEN_BOLD="\[\e[32;1m\]"
COLOR_YELLOW_BOLD="\[\e[33;1m\]"
COLOR_BLUE_BOLD="\[\e[34;1m\]"
COLOR_MAGENTA_BOLD="\[\e[35;1m\]"
COLOR_CYAN_BOLD="\[\e[36;1m\]"
COLOR_NONE="\[\e[0m\]"

KEYSIZE=4
TERMDISPLAYSETUP=$((RANDOM%KEYSIZE))
case "$TERMDISPLAYSETUP" in
	0)
		PS1="${COLOR_MAGENTA_BOLD}: ${COLOR_RED_BOLD}\u${COLOR_MAGENTA_BOLD} @ ${COLOR_RED_BOLD}\h ${COLOR_MAGENTA_BOLD}; "
	;;
	1)
		PS1="${COLOR_GREEN_BOLD}: ${COLOR_CYAN_BOLD}\u${COLOR_GREEN_BOLD} @ ${COLOR_CYAN_BOLD}\h ${COLOR_GREEN_BOLD}; "
	;;
	2)
		PS1="${COLOR_MAGENTA_BOLD}: ${COLOR_BLUE_BOLD}\u${COLOR_MAGENTA_BOLD} @ ${COLOR_BLUE_BOLD}\h ${COLOR_MAGENTA_BOLD}; "
	;;
	3)
		PS1="${COLOR_RED_BOLD}: ${COLOR_BLUE_BOLD}\u${COLOR_RED_BOLD} @ ${COLOR_BLUE_BOLD}\h ${COLOR_RED_BOLD}; "
	;;
	*)
		echo Warning, we received a value of
		echo $TERMDISPLAYSETUP when we should not
		echo have exceeded the key size of $KEYSIZE
		echo Fix this please.
	;;
esac
export PS1

unset TERMDISPLAYSETUP
unset KEYSIZE

# There can never be too much history
export HISTSIZE=32000
export HISTTIMEFORMAT="%Y-%m-%d %T: "


if [ `uname` != "Darwin" ]; then
   export GTK_IM_MODULE=ibus
   export XMODIFIERS=@im=ibus
   export QT_IM_MODULE=ibus
   alias ]='/usr/bin/xdg-open'
fi


#[[ -s "$HOME/.pythonbrew/etc/bashrc" ]] && source "$HOME/.pythonbrew/etc/bashrc"
alias pydev='source "$HOME/.pythonbrew/etc/bashrc"'

function new_python_package {
# I cannot remember where I grabbed this from
# I found it off some website and modified it when
# I was creating lots of Python modules.
# Perhaps there is a better way to do this now,
# like with ruby's bundle gem $mygem
  VERSION="v0.1.0"
  if [ -z "$1" ]; then
    echo ERROR: First argument must be package name 1>&2
    return 1
  fi
  packagename="$1"
  mkdir "${packagename}"
  cd "${packagename}"
  mkdir -p bin "${packagename}"/tests
  #docs 
  touch CHANGES.txt
  echo 'This belongs to Dan Klopp (dsklopp@gmail.com)' > LICENSE.txt
  echo 'and whose exclusive property and all rights entailed' >> LICENSE.txt
  echo "are reserved for this python package called ${packagename}" >> LICENSE.txt

  echo "v0.1.0, " `date '+%B %d, %Y'` >> CHANGES.txt

  echo 'include *.txt' > MANIFEST.in
  echo 'recursive-include docs *.txt' >> MANIFEST.in
  echo 'include *.md' > MANIFEST.in

cat <<'EOF' > README.md
===========
${packagename}
===========

${packagename} provides such and such and so and so. You might find
it most useful for tasks involving <x> and also <y>. Typical usage
often looks like this::

```
#!/usr/bin/env python

import ${packagename}
# Use it
```

To run the tests, utilize nodetests
```
nodetests
```


Authors
============

Daniel Klopp (dsklopp@gmail.com)

EOF

echo '#!/usr/bin/env python' > "${packagename}"/__init__.py
echo 'def main():' >> "${packagename}"/__init__.py
echo '    print("Hello World!")' >> "${packagename}"/__init__.py
echo '    return "Hello World!"' >> "${packagename}"/__init__.py


cat <<EOF > "${packagename}"/tests/test_main.py
from unittest import TestCase

import ${packagename}

class TestMain(TestCase):
    def test_is_string(self):
        s = ${packagename}.main()
        self.assertTrue(isinstance(s, basestring))

EOF
touch "${packagename}"/tests/__init__.py

cat <<EOF > setup.py
from distutils.core import setup

setup(
  name='$packagename',
  version='${VERSION}',
  author='Dan Klopp',
  author_email='dsklopp@gmail.com',
  packages=['$packagename', '$packagename.tests'],
  scripts=[],
  url='http://pypi.python.org/pypi/$packagename/',
  license='LICENSE.txt',
  description='$packagename',
  test_suite='nose.collector',
  tests_require=['nose'],
  long_description=open('README.md').read(),
  install_requires=[],
  #install_requires=[
  #    "Django >= 1.1.1",
  #    "caldav == 0.1.4",
  #],
)
EOF
  # Go back to the parent directory, like
  # all other such tools
  cd ..
}

# JSON stuff
jl () {
  jltmp="/tmp/jl-$$"
  if [[ -f "$1" ]]; then
    python -m simplejson.tool $1 >"$jltmp" 2>&1 && { echo "JSON Good"; rm "$jltmp"; return 0; } || { cat "$jltmp"; rm "$jltmp"; return 1; }
  else
    echo "Usage: jl <file.json>"
  fi
}

ppj () {
  ppjtmp="/tmp/ppj-$$"
  infile="$1"
  outfile="$2"
  command="python -m simplejson.tool"
  if [[ $@ ]]; then
    if jl "$infile" >"$ppjtmp"; then
      if [[ "$outfile" ]]; then
        if [[ "$infile" == "$outfile" ]]; then
          cp "$infile" "$ppjtmp" && infile="$ppjtmp"
        fi
        $command "$infile" | sed 's/  / /g' > "$outfile"
      else
        $command "$infile" | sed 's/  / /g'
      fi
    else
      cat "$ppjtmp"
    fi
  else
    echo "Usage: ppj <file1.json> [ <file2.json> | <file1.json> ]"
  fi
  [[ -f "$ppjtmp" ]] && rm "$ppjtmp"
}

PATH=$HOME/.rbenv/bin:$PATH
PATH=$HOME/.pyenv/bin:$PATH
export PATH
which pyenv &> /dev/null
if [ $? -eq 0 ]; then
   eval "$(pyenv init -)"
   pyvers=`python -V 2>&1`
   echo "Using Python: $pyvers"
else
   echo "You do not have Python properly configured for pyenv to function"
fi
export DOCKER_HOST=tcp://localhost:4243

which rbenv &> /dev/null
if [ $? -eq 0 ]; then
   eval "$(rbenv init -)"
   which ruby &> /dev/null
   if [ $? -eq 0 ]; then
      rubvers=`ruby -v | awk '{print $2}'`
      echo "Using Ruby: $rubvers"
   else
      echo ERROR: rbenv is installed but ruby was not 1>&2
   fi
else
   echo "You do not have Ruby properly configured for rbenv to function"
fi

# Set the JAVA_HOME if applicable on a MAC
if [ `uname` == "Darwin" ]; then
   if [ ! -f /usr/libexec/java_home ]; then
      echo "WARNING: You have no java installed, java_home not found"
   else
      JAVA_HOME=`/usr/libexec/java_home`
      #JAVA_HOME=`dirname $JAVA_HOME`
      #JAVA_HOME=`dirname $JAVA_HOME`
      STUDIO_JDK=`dirname $JAVA_HOME`
      STUDIO_JDK=`dirname $STUDIO_JDK`
      export JAVA_HOME
      export STUDIO_JDK
      echo JAVA_HOME=$JAVA_HOME
   fi
fi

function enable_kivy {
   pythonversion=`python -V 2>&1 |awk '{print $2}'`
   if [ "$pythonversion" != "2.7.9" ]; then
      echo ERROR, only Python 2.7.9 was configured to use Kivy, refusing to configure. 1>&2
      return
   fi
   NEWPATH=""
   for apath in `echo $PATH | tr ':' ' '`; do
      if [ "$apath" == "$HOME/.pyenv/versions/2.7.9/bin" ]; then
         continue
      fi
      if [ "$apath" == "$HOME/.buildozer/android//platform/android-sdk-21/platform-tools" ]; then
         continue
      fi
      if [ -z "$NEWPATH" ]; then
         NEWPATH=$apath
      else
         NEWPATH=$apath:$NEWPATH
      fi
   done
   export PATH=~/.pyenv/versions/2.7.9/bin:~/.buildozer/android//platform/android-sdk-21/platform-tools:$NEWPATH
}

function install_pyenv {
  which pyenv &> /dev/null
  if [ $? -eq 0 ]; then
    echo ERROR: pyenv in path, aborting 1>&2
    return 1
  fi
  cd $HOME
  git clone https://github.com/yyuu/pyenv.git ~/.pyenv
  export PYENV_ROOT="$HOME/.pyenv" 
  export PATH="$PYENV_ROOT/bin:$PATH"
  pyenv rehash
  echo
  echo You must add:
  echo 'export PYENV_ROOT="$HOME/.pyenv"'
  echo 'export PATH="$PYENV_ROOT/bin:$PATH"'
  echo to your path
  

}

function install_rbenv {
  which rbenv &> /dev/null
  if [ $? -eq 0 ]; then
    echo ERROR: rbenv in path, aborting 1>&2
    return 1
  fi
  cd $HOME
  git clone https://github.com/sstephenson/rbenv.git ~/.rbenv
  git clone https://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build
  export PATH="$HOME/.rbenv/bin:$PATH"
  rbenv rehash
  echo
  echo You must add:
  echo 'export PATH="$HOME/.rbenv/bin:$PATH"'
  echo to your path
  
}
function myhelp {
  cat ~/.bash_danklopp | grep ^function
}

function configure_vim {
  if [ ! -e "$1" ]; then
    echo The .vimrc file "$1" does not exist, please give the absolute path
    echo to your .vimrc file.
    return 1
  fi
  if [ ! -d ~/.vim/bundle ]; then
    mkdir -p ~/.vim/bundle
  fi
  if [ "$HOME/.vimrc" != "$1" ]; then
    ln -s "$1" "$HOME/.vimrc"
  fi
  if [ ! -e ~/.vim/bundle/Vundle.vim ]; then
    git clone https://github.com/gmarik/Vundle.vim.git ~/.vim/bundle/Vundle.vim
  fi
}

function configure_terraform {
   cd /tmp
   mkdir terraform
   cd terraform
   wget https://dl.bintray.com/mitchellh/terraform/terraform_0.4.2_linux_amd64.zip
   sudo mv * /usr/bin/
}
function create_chefrepo_for_chefzero {
   mkdir chef-repo
   cd chef-repo
   mkdir data_bags roles environments .chef cookbooks
   cat <<EOF > .chef/knife.rb
current_dir = File.dirname(__FILE__)
user = ENV['OPSCODE_USER'] || ENV['USER']
node_name                user
client_key               "#{current_dir}/#{user}.pem"
validation_key           "#{current_dir}/validator.pem"
chef_server_url          "http://127.0.0.1:8889/"
cookbook_path            ["#{current_dir}/../cookbooks"]
EOF
   cat <<EOF > .chef/$USER.pem
-----BEGIN RSA PRIVATE KEY-----
MIIEogIBAAKCAQEAqNsLXIc4NtfZlyAP7yWKpZ8WlslETygSbgsWjz/r2+iF1iEaEisXbckdjP1f
cUsgxOvRVpm6f3iU9jWyE5DQG6m44cjSCPstMQnMz6BiS7Rv+oAEDAyT+AoYnq9vAYPmrjy+xaiG
ozTw1MBzlOqkZ1oVWpQE8Fr5sbC017Y9euMCObkV2jpM3t6fH27QQc+eJ/e5BRap+anmbiDBwTpP
7986AcA1LQ9OtHqsY7Hzub+gbyMORzQOE/eP6E86sF6qla3/z+uUozGOzSaPqKwBjeSdD0bNMIOe
1BpfmPfSEB31DXGHLiBxNEtuicz4XEVF0jVZP8RT87WySVKrA0e+tQIDAQABAoIBAE9ZJ9yiWmND
Saf/1B0QajfsK4ROLkB4VzjJEx/b7O0ZNpNqWMMC5u6bXLydcFVf9ZU0L9pfQUmXk4CjuPwCyBjH
x+6qHTFFP3ZU4Z8MAkULFLgFomE7I+mibPFdBXAT2Lo2J3vg9uwI+8cubOIk5X7/0RsQhcWhKsc6
f7ECnZ95+7fPxo/mJ3eIAqAiXhxtgWA/ggnhgRqvLSaPQQc3HRBn4RMRRxW3yxfKL5VGq8a2SsoV
uH3JqcMxbL4aHtso9G5NXnr8QO+rJwFl3X+4ZOXKxeyMo8K2cJYTkFzKKrT2ONdscEGV4E8UtCAQ
00g8N1KBwnGJ6MFj6nULTGluwqECgYEA4pZYvt4z8qJDgMNmJZoUHxQDWsvCfLl4VoSvpZWxDEfm
+VI/JQ8EUAv2THTS7ppRb+d9/P/3OoKuzgE1S9K6TmGCIkE0eAhsNgpCcrdXVbYR3ITbpluDUhXF
Z8sBGuJ1UAx3vaLSIxAqX5WYeU695y4S4bWcTtH15rmYy+5f6x0CgYEAvsY8Hn7VJ/UBpMV6Wsg4
iN0idV762+2SxzeVknP4WaWNICJfI21lIxZMRUVk02tObGBwVibCZ1kqPAaMckaWwYoQ6OrvtDEi
inUHasasAWsuf+AGOACyxEGcJO4e0bgWXwP5ZjWpPq4kNQbu+/saqZsGAWACT+Z3mjXg2E0HtnkC
gYADsioeaud0BLuPJSDMajf7zcrEN2Cjwi65Uo6+57MsnRuiY3oOM7GBUMCivKEYLUI4zhDbCJ3S
wYDycUiaRQSu9J43ytJ9Rr3lH8O3tU/iYQbnju86RnHc6+f9am1JL/pz5NArMrW0xrW6O2lySRuF
4tWCAwFas8gMDGj2opvD7QKBgCdbHevsnmyvzrb/Rk6UH5WciQ9NmNLmH/GZNfIQmptj28lVTesx
Fjw2zWU8+5/h8zvIaWRcep53do8Lis3IYjFrGjHyxaCWwllt6ynL8pAYXG9k9+N1wWtbXasAtLrv
Dy5q03iSeWfE5RNLauHw239By+tcsx1oniPiGZCF06GBAoGAOQJ/yiHBX+J1iVrsJYwl0/4iBw5y
yMtLsNQOkwMdzyXMkGmz8JbQJJxIZZCXcMahI9RXsuGCviVh5w0WZgseE893YQU8rdqbfT0Pbtzk
aThRm0LNYGrRDxKj/f/EnBPsNDb0U2o+EVr/NB4z2ZZJwnXUtTGdKnYcq+2gLPKMuW4=
-----END RSA PRIVATE KEY-----
EOF
   cp .chef/$USER.pem .chef/validator.pem
}

function export_aws_creds {
   if [ ! -f ~/.aws/credentials ]; then
      echo ERROR: No file ~/.aws/credentials found  1>&2
      return 1
   fi
   if [ `grep -q aws_access_key_id ~/.aws/credentials` ]; then
      echo ERROR: aws_access_key_id not set in ~/.aws/credentials  1>&2
      return 1
   fi
   if [ `grep -q aws_secret_access_key ~/.aws/credentials` ]; then
      echo ERROR: aws_secret_access_key not set in ~/.aws/credentials  1>&2
      return 1
   fi
   key=`grep aws_access_key_id ~/.aws/credentials | tr -d ' ' | awk -F= '{print $2}'`
   secret=`grep aws_secret_access_key ~/.aws/credentials | tr -d ' ' | awk -F= '{print $2}'`
   export AWS_ACCESS_KEY_ID=$key
   export AWS_SECRET_ACCESS_KEY=$secret
}

if [ `uname` == "Darwin" ]; then
  alias sublime='/Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl'
  export GOPATH=~/go
  export PATH=$PATH:~/Documents/code/xaas/xaas-scripts
  export PATH=$PATH:/usr/local/sbin:/usr/local/bin
  export PATH=$PATH:$GOPATH/bin
fi
if [ -e ~/Documents/code/quantum ]; then
  PATH=~/Documents/code/quantum/quantum-flip/bin:$PATH
  export PATH
fi
which docker-machine &> /dev/null
if [ $? -eq 0 ]; then
  echo Docker-machine found, activating environment
  eval $(docker-machine env)
fi

which go &> /dev/null
if [ $? -eq 0 ]; then
	echo Go detected, setting up environment
  if [ `uname` == "Darwin" ]; then
    GOPATH=$HOME/go
	elif [ `uname -o` == "Cygwin" ]; then
		GOPATH="c:\cygwin64\home\synfi\go"
	else
		GOPATH=$HOME/go
	fi
	export GOPATH
	PATH="$GOPATH/bin:$PATH"
	export PATH
	which godep &> /dev/null
	if [ $? -ne 0 ]; then
		echo Godep not installed, install via:
		echo go get github.com/tools/godep

	fi
fi

GO_PACKS="terraform"
function mygo {
  if [ "$1" == "list" ]; then
    for PACK in ${GO_PACKS}; do
      echo $PACK
    done
  elif [ "$1" == "set" ]; then
    shift
    PACK=$1
    if [ -z "$PACK" ]; then
      echo ERROR: do not set a zero length string &>2
      return 1
    fi
    shift
    if [ ! -d $HOME/go ]; then
      mkdir $HOME/go
    fi
    if [ ! -d $HOME/go/$PACK ]; then
      mkdir $HOME/go/$PACK
    fi
    GOPATH=$HOME/go/$PACK
    export GOPATH
    PATH="$GOPATH/bin:$PATH"
    export PATH
    which godep &> /dev/null
    if [ $? -ne 0 ]; then
      echo Godep not installed, install via:
      echo go get github.com/tools/godep
    fi
    for adir in bin pkg src; do
      mkdir $GOPATH/$adir &> /dev/null
    done
  else
    echo "Pass options of: "
    echo " list"
    echo " set \$pack where \$pack is one of the go packages found in list"
  fi
}
function d {
  for var in `env|grep DOCKER|awk -F= '{print $1}'`; do unset $var; done
  if [ -z "${SWARM_MANAGER}" ]; then
    echo $SWARM_MANAGER is not set, set it to the swarm manager and port number, usually :4000
    return 1
  fi
  docker -H ${SWARM_MANAGER} $@
}
function dc {
  for var in `env|grep DOCKER|awk -F= '{print $1}'`; do unset $var; done
  if [ -z "${SWARM_MANAGER}" ]; then
    echo $SWARM_MANAGER is not set, set it to the swarm manager and port number, usually :4000
    return 1
  fi
  docker-compose -H ${SWARM_MANAGER} $@
}

function clean_docker {
  docker rm `docker ps -a|grep -v ^CONTAIN|awk '{print $1}'`
  docker rmi `docker images|grep -v IMAGE| egrep -v "^debian|^ruby|^ubuntu" |awk '{print $3}'`
}
